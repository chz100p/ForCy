
10 %c
:lf

13 %c
:cr

0x23 %c
1 _ds
{
32 %c dup @ %d
--
} for ..
cr lf
:_ds_dump

100 %
dup 10 /
dup
{
0x30 + %c
}
{
. 32 %c
} ifelse
10 % 0x30 + %c
:%2d

dup 10 % swap 10 /
dup 10 % swap 10 /
dup 10 % swap 10 /
10 %
dup { . 0xfff0 1 @ { 0xfff0 1 = 2 @ { 0xfff0 2 = } ! if } ! if } ! if
0x30 + %c
0x30 + %c
0x30 + %c
0x30 + %c
:%4d

dup 12 >> %x
dup 8 >> 15 & %x
dup 4 >> 15 & %x
15 & %x
:%04x

swap %04x %04x
:dw%08x

16 <
{
2 @ over << 2 @ 16 3 @ - >> |
}
{
over over 16 - <<
} ifelse
2 =
<<
:dw<<

16 <
{
over over >> 3 @ 16 3 @ - << |
}
{
2 @ over 16 - >>
} ifelse
1 =
2 @ over >> 2 =
.
:dw>>

2 @ over +
over <
//dup { . 1 } if
5 @ +
3 @ +
4 =
2 =
..
:dw+

// dwa0 dwa1 dw~
~
over ~
1 =
:dw~

// dwa0 dwa1 dw++
0 1 dw+
:dw++

// dwa0 dwa1 dwb0 dwb1 dw-
//dw~ dw++ dw+
2 @ over -
3 @ >
~ ++
5 @ +
3 @ -
4 =
2 =
..
:dw-

// dwa0 dwa1 dwb0 dwb1 dw-+
dup 3 @ -
over >
~ ++
3 @ +
5 @ -
4 =
2 =
..
:dw-+

// dwa0 dwa1 dw--
0 1 dw-
:dw--

// dwa0 dwa1 dwb0 dwb1 dw*
0 0
32 0
{
5 @ 5 @ 2 @ dw>> 1 &
{
8 @ 8 @ 3 @ dw<< 6 @ 6 @ dw+ 4 = 4 =
} if .
++
} for ..
3 = 3 =
..
:dw*

// c1 c2 ... cn n dropstr
{
dup while
-- nip
} do
.
:dropstr

// 0 c1 c2 ... cn dropstr0
{ while } do
:dropstr0

// c1 c2 ... cn n %str
dup 2 swap 2 +
{
dup @ %c
--
} for ..
dropstr
:%str

// 0 c1 c2 ... cn %rstr0
{
dup while
%c
} do
.
:%rstr0

// 0 c1 c2 ... cn strlenstr0
0
{
dup ++ @ while
++
} do
:strlenstr0

// strlen
0
{
dup @s while
++
} do
:strlen

// pushrstr0
strlen
{
dup @s
swap
dup while
--
} do
.
:pushrstr0

//
0
{
dup ++ @ dup while
over @s == while
.
++
} do
swap @s == nip
:strcmp

// 0 c1 c2 ... cn %str0
strlenstr0 %str .
:%str0

[10]fizzbuzz

// num FizzBuzz
0x30 +
0 =fizzbuzz
0 1 =fizzbuzz
:FizzBuzz

// num rstr0
0 swap
{
dup while
dup 10 %
0x30 +
swap
10 /
} do
{
0x30
} == if
:rstr0

// num FizzBuzzrstr0
{
{ rstr0 }
{ . 0 0x7a 0x7a 0x75 0x42 } dup 5 % ifelse
}
{
{ . 0 0x7a 0x7a 0x69 0x46 }
{ . 0 0x7a 0x7a 0x75 0x42 0x7a 0x7a 0x69 0x46 } dup 5 % ifelse
} dup 3 % ifelse
:FizzBuzzrstr0

0
{
dup fizzbuzz
dup while
%c
++
} do
..
:fizzbuzzp

FizzBuzzrstr0
%rstr0 cr lf
:FizzBuzzp

// FizzBuzz-test
//1 FizzBuzzp
//20 0 { dup FizzBuzzp ++ } for ..
//0x41 0x42 0x43 3 %str cr lf
//0 0x43 0x42 0x41 %rstr0 cr lf
//0 0x41 0x42 0x43 %str0 cr lf
//0 rstr0 %rstr0 cr lf
//123 rstr0 %rstr0 cr lf
//12345 rstr0 %rstr0 cr lf
"" strlen 0 == { "[.]" } { "[X]" } ifelse %s " 1. " %s %d cr lf
"abc" strlen 3 == { "[.]" } { "[X]" } ifelse %s " 2. " %s %d cr lf
"0123456789" strlen 10 == { "[.]" } { "[X]" } ifelse %s " 3. " %s %d cr lf
0 "" strcmp { "[.]" } { "[X]" } ifelse %s " 1. " %s %rstr0 cr lf
0 0x63 0x62 0x61 "abc" strcmp { "[.]" } { "[X]" } ifelse %s " 2. " %s %rstr0 cr lf
0 0x39 0x38 0x37 0x36 0x35 0x34 0x33 0x32 0x31 0x30 "0123456789" strcmp { "[.]" } { "[X]" } ifelse %s " 3. " %s %rstr0 cr lf
"" pushrstr0 "" strcmp { "[.]" } { "[X]" } ifelse %s " 1. " %s %rstr0 cr lf
"abc" pushrstr0 "abc" strcmp { "[.]" } { "[X]" } ifelse %s " 2. " %s %rstr0 cr lf
"0123456789" pushrstr0 "0123456789" strcmp { "[.]" } { "[X]" } ifelse %s " 3. " %s %rstr0 cr lf
_ds_dump
:FizzBuzz-test
